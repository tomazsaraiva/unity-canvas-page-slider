{
  "api/TS.PageSlider.html": {
    "href": "api/TS.PageSlider.html",
    "title": "Namespace TS.PageSlider | Unity Page Slider",
    "keywords": "Namespace TS.PageSlider Classes PageContainer This class represents a container for a page in a paginated view. It handles assigning content to the container and manages the active state of the contained page. PageDot This class represents a single dot indicator used for navigation in a paginated view. It provides properties for its active state and index, and events for state changes and presses. PageDotsIndicator This class manages a collection of page dots used for navigation in a paginated view. It provides methods to add, clear, and change the active dot. PageScroller The PageScroller class manages scrolling within a PageSlider component. It handles user interaction for swiping between pages and snapping to the closest page on release. PageSlider The PageSlider class manages a collection of pages within a PageScroller component. It provides functionality for adding, removing, and keeping track of pages, as well as handling page change events. PageView This class represents a view or page within a paginated view system. It provides events to signal changes in the active state of the page."
  },
  "api/TS.PageSlider.PageContainer.html": {
    "href": "api/TS.PageSlider.PageContainer.html",
    "title": "Class PageContainer | Unity Page Slider",
    "keywords": "Class PageContainer This class represents a container for a page in a paginated view. It handles assigning content to the container and manages the active state of the contained page. Inheritance System.Object PageContainer Namespace: TS.PageSlider Assembly: .dll Syntax public class PageContainer : MonoBehaviour Methods AssignContent(RectTransform) Assigns content (RectTransform) to this container. If no content is provided, it creates a new GameObject with a RectTransform and a PageView component. The assigned content is then parented to this container and its properties are set to ensure proper positioning and scaling. Declaration public void AssignContent(RectTransform content) Parameters Type Name Description RectTransform content The RectTransform representing the content to be assigned. ChangeActiveState(bool) Calls the ChangeActiveState method on the contained PageView component with the provided active state. Declaration public void ChangeActiveState(bool active) Parameters Type Name Description bool active True to set the page to active, False to set it to inactive. ChangingToActiveState() Calls the ChangingToActiveState method on the contained PageView component, to signal a transition to an active state. Declaration public void ChangingToActiveState() ChangingToInactiveState() Calls the ChangingToInactiveState method on the contained PageView component, to signal a transition to an inactive state. Declaration public void ChangingToInactiveState()"
  },
  "api/TS.PageSlider.PageDot.html": {
    "href": "api/TS.PageSlider.PageDot.html",
    "title": "Class PageDot | Unity Page Slider",
    "keywords": "Class PageDot This class represents a single dot indicator used for navigation in a paginated view. It provides properties for its active state and index, and events for state changes and presses. Inheritance System.Object PageDot Namespace: TS.PageSlider Assembly: .dll Syntax public class PageDot : MonoBehaviour Fields OnActiveStateChanged Declaration public UnityEvent<bool> OnActiveStateChanged Field Value Type Description UnityEvent<bool> OnPressed UnityEvent with an integer parameter that is invoked when the dot is pressed. The parameter represents the index of the pressed dot. Declaration public UnityEvent<int> OnPressed Field Value Type Description UnityEvent<int> Properties Index Gets or sets the index of the page dot within the paginated view. Declaration public int Index { get; set; } Property Value Type Description int IsActive Gets the active state of the page dot. Declaration public bool IsActive { get; } Property Value Type Description bool Methods ChangeActiveState(bool) Changes the active state of the page dot and invokes the OnActiveStateChanged event. Declaration public virtual void ChangeActiveState(bool active) Parameters Type Name Description bool active True to set the dot active, False to set it inactive. Press() Invokes the OnPressed event with the dot's index when the dot is pressed. Declaration public void Press()"
  },
  "api/TS.PageSlider.PageDotsIndicator.html": {
    "href": "api/TS.PageSlider.PageDotsIndicator.html",
    "title": "Class PageDotsIndicator | Unity Page Slider",
    "keywords": "Class PageDotsIndicator This class manages a collection of page dots used for navigation in a paginated view. It provides methods to add, clear, and change the active dot. Inheritance System.Object PageDotsIndicator Namespace: TS.PageSlider Assembly: .dll Syntax public class PageDotsIndicator : MonoBehaviour Fields OnDotPressed Declaration public UnityEvent<int> OnDotPressed Field Value Type Description UnityEvent<int> Properties IsVisible Gets or sets the visibility of the PageDotsIndicator game object. Declaration public bool IsVisible { get; set; } Property Value Type Description bool Methods Add() Adds a new page dot indicator to the collection. Declaration public void Add() ChangeActiveDot(int, int) Changes the active state of the page dots. It deactivates the dot at the 'fromIndex' and activates the dot at the 'toIndex'. Declaration public void ChangeActiveDot(int fromIndex, int toIndex) Parameters Type Name Description int fromIndex The index of the dot to deactivate. int toIndex The index of the dot to activate. Clear() Clears all the page dot indicators from the collection and destroys their game objects. Declaration public void Clear()"
  },
  "api/TS.PageSlider.PageScroller.html": {
    "href": "api/TS.PageSlider.PageScroller.html",
    "title": "Class PageScroller | Unity Page Slider",
    "keywords": "Class PageScroller The PageScroller class manages scrolling within a PageSlider component. It handles user interaction for swiping between pages and snapping to the closest page on release. Inheritance System.Object PageScroller Implements IBeginDragHandler IEndDragHandler Namespace: TS.PageSlider Assembly: .dll Syntax public class PageScroller : MonoBehaviour, IBeginDragHandler, IEndDragHandler Fields OnPageChangeEnded Event triggered when a page change ends. The event arguments are the index of the current page and the index of the new active page. Declaration public UnityEvent<int, int> OnPageChangeEnded Field Value Type Description UnityEvent<int, int> OnPageChangeStarted Declaration public UnityEvent<int, int> OnPageChangeStarted Field Value Type Description UnityEvent<int, int> Properties Content Gets the RectTransform of the content being scrolled within the ScrollRect. Declaration public RectTransform Content { get; } Property Value Type Description RectTransform Rect Gets the rectangle of the ScrollRect component used for scrolling. Declaration public Rect Rect { get; } Property Value Type Description Rect Methods OnBeginDrag(PointerEventData) Declaration public void OnBeginDrag(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData OnEndDrag(PointerEventData) Declaration public void OnEndDrag(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData SetPage(int) Declaration public void SetPage(int index) Parameters Type Name Description int index Implements IBeginDragHandler IEndDragHandler"
  },
  "api/TS.PageSlider.PageSlider.html": {
    "href": "api/TS.PageSlider.PageSlider.html",
    "title": "Class PageSlider | Unity Page Slider",
    "keywords": "Class PageSlider The PageSlider class manages a collection of pages within a PageScroller component. It provides functionality for adding, removing, and keeping track of pages, as well as handling page change events. Inheritance System.Object PageSlider Namespace: TS.PageSlider Assembly: .dll Syntax public class PageSlider : MonoBehaviour Fields OnPageChanged Declaration public UnityEvent<PageContainer> OnPageChanged Field Value Type Description UnityEvent<PageContainer> Properties Rect Gets the rectangle of the PageSlider component. Declaration public Rect Rect { get; } Property Value Type Description Rect Methods AddPage(RectTransform) Adds a new page to the PageSlider. The content argument specifies the RectTransform of the content to be displayed on the new page. Declaration public void AddPage(RectTransform content) Parameters Type Name Description RectTransform content The RectTransform of the content to be displayed on the new page. Clear() Removes all pages from the PageSlider and clears the associated PageDotsIndicator (if exists). Declaration public void Clear()"
  },
  "api/TS.PageSlider.PageView.html": {
    "href": "api/TS.PageSlider.PageView.html",
    "title": "Class PageView | Unity Page Slider",
    "keywords": "Class PageView This class represents a view or page within a paginated view system. It provides events to signal changes in the active state of the page. Inheritance System.Object PageView Namespace: TS.PageSlider Assembly: .dll Syntax public class PageView : MonoBehaviour Fields OnActiveStateChanged UnityEvent with a boolean parameter that is invoked when the active state of the page changes. The parameter is True if the page becomes active, False if it becomes inactive. Declaration public UnityEvent<bool> OnActiveStateChanged Field Value Type Description UnityEvent<bool> OnChangingToActiveState Declaration public UnityEvent OnChangingToActiveState Field Value Type Description UnityEvent OnChangingToInactiveState UnityEvent that is invoked when the page is about to transition to the inactive state. Declaration public UnityEvent OnChangingToInactiveState Field Value Type Description UnityEvent Methods ChangeActiveState(bool) Invokes the OnActiveStateChanged event with the provided active state. Declaration public void ChangeActiveState(bool active) Parameters Type Name Description bool active True to signal the page becoming active, False for inactive. ChangingToActiveState() Invokes the OnChangingToActiveState event to signal that the page is about to become active. Declaration public void ChangingToActiveState() ChangingToInactiveState() Invokes the OnChangingToInactiveState event to signal that the page is about to become inactive. Declaration public void ChangingToInactiveState()"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Unity Page Slider | Unity Page Slider",
    "keywords": "Unity Page Slider Core Components Page Slider: This core component manages your entire paginated UI system. It houses your pages, triggers page change events, and provides overall control. Page Scroller: This component handles the smooth scrolling of your pages. You can configure scrolling behavior and receive notifications when a page transition begins or ends Page View: This serves as the individual page within your paginated system. Here, you build and customize the layout of each page. It also triggers events when a page is activated or deactivated. Optional Components Page Dots Indicator: This optional component provides a collection of dots to visually represent your pages and aid navigation. Users can interact with these dots to jump to specific pages. Page Dot: This represents a single dot within the Page Dots Indicator component. Each dot corresponds to a specific page within your paginated UI. Setup You can create a Page Slider in two ways: either with a predefined set of pages and content, or by loading content dynamically into the slider at runtime. Check the following guides for step-by-step tutorials: Using Predefined Content Implementing Dynamic Content Helpful links For a more in-depth explanation, check out this video. Explore the API Reference for more details. Modify the source code available on GitHub. Install directly from the Unity Asset Store. Get in touch with me at tomazsaraiva.com."
  },
  "docs/setup-editor.html": {
    "href": "docs/setup-editor.html",
    "title": "Using Predefined Content | Unity Page Slider",
    "keywords": "Using Predefined Content This guide walks you through creating a Page Slider with a predefined set of pages and content. 1. Add the Page Slider Create a new Canvas GameObject. In the Project window, locate the PageSlider prefab within your project's folder structure: PageSlider/Prefabs/. Drag the PageSlider prefab from the Project window and make it a child of the Canvas in the Hierarchy. 2. (Optional) Add Page Dots Indicator In the Project window, locate the PageDotsIndicator prefab within your project's folder structure: PageSlider/Prefabs/. Drag the PageDotsIndicator prefab and make it a child of the PageSlider in the Hierarchy. In the Inspector window, assign the PageDotsIndicator to the Dots Indicator field. 3. Add a new Page Select the PageSlider GameObject. Click the Add Page button in the Inspector window. Expand the PageSlider hierarchy to locate the newly created Page_X/Content GameObject. Select the Content GameObject and add your desired UI elements to configure the page layout. Repeat the previous steps to add more pages. Helpful links Understand the main concepts by reading the getting started guide For a more in-depth explanation, check out this video. Explore the API Reference for more details. Modify the source code available on GitHub. Install directly from the Unity Asset Store. Get in touch with me at tomazsaraiva.com."
  },
  "docs/setup-runtime.html": {
    "href": "docs/setup-runtime.html",
    "title": "Implementing Dynamic Content | Unity Page Slider",
    "keywords": "Implementing Dynamic Content This tutorial explores loading content dynamically into your Page Slider at runtime, allowing for greater control and adaptability. 1. Add the Page Slider Create a new Canvas GameObject. In the Project window, locate the PageSlider prefab within your project's folder structure: PageSlider/Prefabs/. Drag the PageSlider prefab from the Project window and make it a child of the Canvas in the Hierarchy. 2. (Optional) Add Page Dots Indicator In the Project window, locate the PageDotsIndicator prefab within your project's folder structure: PageSlider/Prefabs/. Drag the PageDotsIndicator prefab and make it a child of the PageSlider in the Hierarchy. Select the PageSlider GameObject. In the Inspector window, assign the PageDotsIndicator to the Dots Indicator field. 3. Create a Page View Select the Canvas GameObject. In the Project window, locate the PageView prefab within your project's folder structure: PageSlider/Prefabs/. Drag the PageView prefab from the Project window and make it a child of the Canvas in the Hierarchy. Add your desired UI elements to configure the PageView layout. In this example, I'm adding a single Label, but the layout can be as complex as you need. Create a new prefab for the PageView layout. The Page Slider will instantiate this prefab at runtime to generate each page. Disable or remove the page layout from the Scene. 4. Add Pages at runtime Create a new C# script (or use an existing one). Create a reference to the PageSlider and the PageView prefab. Instantiate the pages that you want and configure their properties. Add the pages to the PageSlider using the AddPage method. Please note it accepts a RectTransform component. using TMPro; using TS.PageSlider; using UnityEngine; public class PageSliderDemo : MonoBehaviour { public PageSlider _pageSlider; public PageView _pageView; void Start() { for (int i = 0; i < 3; i++) { var page = Instantiate(_pageView); page.GetComponentInChildren<TextMeshProUGUI>().text = i.ToString(); _pageSlider.AddPage((RectTransform)page.transform); } } } Assign the PageSlider and the PageView prefab references. Run the project and the pages will be added dynamically to the PageSlider. Note: For more complex cases you should create a custom class for the page layout. Check the Demo_Dynamic and Demo_Lazy available on the GitHub repository. Helpful links Understand the main concepts by reading the getting started guide For a more in-depth explanation, check out this video. Explore the API Reference for more details. Modify the source code available on GitHub. Install directly from the Unity Asset Store. Get in touch with me at tomazsaraiva.com."
  },
  "index.html": {
    "href": "index.html",
    "title": "Unity Page Slider | Unity Page Slider",
    "keywords": "Unity Page Slider The Unity Page Slider is a Canvas Component that lets you easily create scrollable interfaces with a fixed number of pages. It's perfect for image galleries, menus, level selection, tutorials, and more. Features Highly Customizable: Add any type of content - images, text, buttons, even nested UI elements - to create unique layouts. Smooth scrolling: Customize the transition speed for a seamless user experience. Page snapping: Pages snap into place for clear transitions. Clear Navigation: Interactive Dots provide a visual indicator of the current page and total number of pages. Static and Dynamic: Build your pages directly in the editor or dynamically at runtime. Helpful links Follow the Getting Started guide to get up and running. Explore the API Reference for more details. Modify the source code available on GitHub. Install directly from the Unity Asset Store. Get in touch with me at tomazsaraiva.com."
  }
}